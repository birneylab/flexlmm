/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Nextflow config file for running minimal tests
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Defines input files and everything required to run a fast and simple pipeline test.

    Use as follows:
        nextflow run birneylab/stitchimpute -profile test,<docker/singularity> --outdir <OUTDIR>

----------------------------------------------------------------------------------------
*/

profiles {
    test {
        params {
            config_profile_name        = 'Test profile'
            config_profile_description = 'Minimal test dataset to check pipeline function'

            // Limit resources so that this can run on GitHub Actions
            max_cpus   = 2
            max_memory = '1.GB'
            max_time   = '1.h'

            // Input data
            vcf    = "${projectDir}/assets/test_data/vcf/in.vcf"
            freq   = "${projectDir}/assets/test_data/freq/in.afreq"
            pheno  = "${projectDir}/assets/test_data/tsv/pheno.tsv"
            covar  = "${projectDir}/assets/test_data/tsv/covar.tsv"
            qcovar = "${projectDir}/assets/test_data/tsv/qcovar.tsv"

            // phenotypes options
            standardise = true

            // statistical models
            null_model_formula = "y ~ covar1 + qcovar1"
            model_formula      = "y ~ x + I(x == 1) + x:covar1 + covar1 + qcovar1"
            permutations       = 2
        }
    }
    test_bcf {
        params {
            config_profile_name        = 'Test profile'
            config_profile_description = 'Minimal test dataset to check pipeline function'

            // Limit resources so that this can run on GitHub Actions
            max_cpus   = 2
            max_memory = '1.GB'
            max_time   = '1.h'

            // Input data
            bcf    = "${projectDir}/assets/test_data/bcf/in.bcf"
            freq   = "${projectDir}/assets/test_data/freq/in.afreq"
            pheno  = "${projectDir}/assets/test_data/tsv/pheno.tsv"
            covar  = "${projectDir}/assets/test_data/tsv/covar.tsv"
            qcovar = "${projectDir}/assets/test_data/tsv/qcovar.tsv"

            // phenotypes options
            standardise = true

            // statistical models
            null_model_formula = "y ~ covar1 + qcovar1"
            model_formula      = "y ~ x + I(x == 1) + x:covar1 + covar1 + qcovar1"
            permutations       = 2
        }
    }
    test_bgen {
        params {
            config_profile_name        = 'Test profile'
            config_profile_description = 'Minimal test dataset to check pipeline function'

            // Limit resources so that this can run on GitHub Actions
            max_cpus   = 2
            max_memory = '1.GB'
            max_time   = '1.h'

            // Input data
            bgen   = "${projectDir}/assets/test_data/oxford_bgen/in.bgen"
            sample = "${projectDir}/assets/test_data/oxford_bgen/in.sample"
            freq   = "${projectDir}/assets/test_data/freq/in.afreq"
            pheno  = "${projectDir}/assets/test_data/tsv/pheno.tsv"
            covar  = "${projectDir}/assets/test_data/tsv/covar.tsv"
            qcovar = "${projectDir}/assets/test_data/tsv/qcovar.tsv"

            // phenotypes options
            standardise = true

            // statistical models
            null_model_formula = "y ~ covar1 + qcovar1"
            model_formula      = "y ~ x + I(x == 1) + x:covar1 + covar1 + qcovar1"
            permutations       = 2
        }
    }
    test_ped {
        params {
            config_profile_name        = 'Test profile'
            config_profile_description = 'Minimal test dataset to check pipeline function'

            // Limit resources so that this can run on GitHub Actions
            max_cpus   = 2
            max_memory = '1.GB'
            max_time   = '1.h'

            // Input data
            ped    = "${projectDir}/assets/test_data/ped/in.ped"
            map_f  = "${projectDir}/assets/test_data/ped/in.map"
            freq   = "${projectDir}/assets/test_data/freq/in.afreq"
            pheno  = "${projectDir}/assets/test_data/tsv/pheno.tsv"
            covar  = "${projectDir}/assets/test_data/tsv/covar.tsv"
            qcovar = "${projectDir}/assets/test_data/tsv/qcovar.tsv"

            // phenotypes options
            standardise = true

            // statistical models
            null_model_formula = "y ~ covar1 + qcovar1"
            model_formula      = "y ~ x + I(x == 1) + x:covar1 + covar1 + qcovar1"
            permutations       = 2
        }
    }
    test_bed {
        params {
            config_profile_name        = 'Test profile'
            config_profile_description = 'Minimal test dataset to check pipeline function'

            // Limit resources so that this can run on GitHub Actions
            max_cpus   = 2
            max_memory = '1.GB'
            max_time   = '1.h'

            // Input data
            bed    = "${projectDir}/assets/test_data/bed/in.bed"
            bim    = "${projectDir}/assets/test_data/bed/in.bim"
            fam    = "${projectDir}/assets/test_data/bed/in.fam"
            freq   = "${projectDir}/assets/test_data/freq/in.afreq"
            pheno  = "${projectDir}/assets/test_data/tsv/pheno.tsv"
            covar  = "${projectDir}/assets/test_data/tsv/covar.tsv"
            qcovar = "${projectDir}/assets/test_data/tsv/qcovar.tsv"

            // phenotypes options
            standardise = true

            // statistical models
            null_model_formula = "y ~ covar1 + qcovar1"
            model_formula      = "y ~ x + I(x == 1) + x:covar1 + covar1 + qcovar1"
            permutations       = 2
        }
    }
    test_pgen {
        params {
            config_profile_name        = 'Test profile'
            config_profile_description = 'Minimal test dataset to check pipeline function'

            // Limit resources so that this can run on GitHub Actions
            max_cpus   = 2
            max_memory = '1.GB'
            max_time   = '1.h'

            // Input data
            pgen   = "${projectDir}/assets/test_data/pgen/in.pgen"
            psam   = "${projectDir}/assets/test_data/pgen/in.psam"
            pvar   = "${projectDir}/assets/test_data/pgen/in.pvar"
            freq   = "${projectDir}/assets/test_data/freq/in.afreq"
            pheno  = "${projectDir}/assets/test_data/tsv/pheno.tsv"
            covar  = "${projectDir}/assets/test_data/tsv/covar.tsv"
            qcovar = "${projectDir}/assets/test_data/tsv/qcovar.tsv"

            // phenotypes options
            standardise = true

            // statistical models
            null_model_formula = "y ~ covar1 + qcovar1"
            model_formula      = "y ~ x + I(x == 1) + x:covar1 + covar1 + qcovar1"
            permutations       = 2
        }
    }
}